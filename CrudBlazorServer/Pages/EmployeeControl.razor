@using CrudBlazorServer.Models
@using CrudBlazorServer.Service
@using CrudBlazorServer.Components
@using System.Linq;

@page "/employeeControl"
@inject EmployeesService _service
@inject IJSRuntime JsRuntime

<h1>Employee</h1>

<EditForm Model="_employee" Context="formContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group row">
        <label for="firstName" class="col-sm-2 col-form-label">First Name</label>
        <div class="col-sm-10">
            <InputText class="form-control" @bind-Value="_employee.FirstName" placeholder="FirstName" />
        </div>
    </div>
    <div class="form-group row">
        <label for="lastName" class="col-sm-2 col-form-label">Last Name</label>
        <div class="col-sm-10">
            <InputText class="form-control" @bind-Value="_employee.LastName" placeholder="LastName" />
        </div>
    </div>
    <input type="submit" value="Add" class="btn btn-primary" @onclick="(() => Add(formContext))" />
    <input type="submit" value="Update" class="btn btn-primary" @onclick="(()=>Update(_employee.Id))" />
</EditForm>


<br />

<EmployeeGrid Emps="_emps" OnEdit="Edit" OnDelete="Del">
    Loading...
</EmployeeGrid>


@code {
    private List<Employee> _emps;
    private Employee _employee = new Employee();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await _service.GetAsync();
            _emps = result.ToList();
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>(
                "commonJsFunctions.alert",
                $"發生錯誤 : {ex}");
        }
    }

    private async Task Add(EditContext editContext)
    {
        if (editContext.Validate() == false)
        {
            return;
        }

        try
        {
            var returnEmp = await _service.Add(_employee);
            _emps.Add(returnEmp);
            await JsRuntime.InvokeAsync<string>(
                    "commonJsFunctions.alert",
                    "新增完成");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>(
                "commonJsFunctions.alert",
                $"發生錯誤 : {ex}");
        }
    }

    private async Task Edit(int id)
    {
        try
        {
            _employee = await _service.GetAsync(id);
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>(
                "commonJsFunctions.alert",
                $"發生錯誤 : {ex}");
        }
    }

    private async Task Update(int id)
    {
        try
        {
            await _service.Update(id, _employee);
            var index = _emps.FindIndex(m => m.Id == id);
            _emps[index] = _employee;
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>(
                "commonJsFunctions.alert",
                $"發生錯誤 : {ex}");
        }
    }

    private async Task Del(int id)
    {
        try
        {
            await _service.Del(id);
            var index = _emps.FindIndex(m => m.Id == id);
            _emps.RemoveAt(index);
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeAsync<string>(
                "commonJsFunctions.alert",
                $"發生錯誤 : {ex}");
        }
    }

}
